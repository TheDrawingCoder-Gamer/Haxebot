package isolated_vm;

/**
	A instance of Reference is a pointer to a value stored in any isolate.
**/
@:jsRequire("isolated-vm", "Reference") extern class Reference<T> {
	function new(value:T, ?options:{ @:optional var unsafeInherit : Bool; });
	private var __ivm_reference : T;
	/**
		This is the typeof the referenced value, and is available at any time
		from any isolate. Note that this differs from the real typeof operator in
		that null is "null", and Symbols are "object".
	**/
	final typeof : String;
	/**
		Creates a copy of the referenced value and internalizes it into this isolate. This uses the
		same copy rules as ExternalCopy.
	**/
	function copy():js.lib.Promise<T>;
	/**
		Creates a copy of the referenced value and internalizes it into this isolate. This uses the
		same copy rules as ExternalCopy.
	**/
	function copySync():T;
	/**
		Will attempt to return the actual value or object pointed to by this reference. Note that in
		order to call this function the reference must be owned by the current isolate, otherwise an
		error will be thrown.
	**/
	function deref(?options:ReleaseOptions):T;
	/**
		Returns an object, which when passed to another isolate will cause that isolate to
		dereference the handle.
	**/
	function derefInto(?options:ReleaseOptions):Dereference<T>;
	/**
		Releases this reference. If you're passing around a lot of references between isolates it's
		wise to release the references when you are done. Otherwise you may run into issues with
		isolates running out of memory because other isolates haven't garbage collected recently.
		After calling this method all attempts to access the reference will throw an error.
	**/
	function release():Void;
	/**
		Delete a property from this reference, as if using `delete reference[property]`
	**/
	function delete(property:Dynamic):js.lib.Promise<ts.Undefined>;
	function deleteIgnored(property:Dynamic):Void;
	function deleteSync(property:Dynamic):Void;
	/**
		Will access a reference as if using reference[property] and return a reference to that value.
		
		If the object is a proxy, or if the property is a getter, this method will throw.
	**/
	function get<Options, Key>(property:Key, ?options:Options):ResultTypeAsync<Dynamic, Dynamic>;
	function getSync<Options, Key>(property:Key, ?options:Options):CheckPromise<Dynamic, ResultTypeBase<Dynamic, Dynamic>>;
	/**
		Will access a reference as if using reference[property] and return a reference to that value.
	**/
	function set<Options, Key>(property:Key, value:ArgumentType<Options, Dynamic>, ?options:Options):js.lib.Promise<ts.Undefined>;
	function setIgnored<Options, Key>(property:Key, value:ArgumentType<Options, Dynamic>, ?options:Options):Void;
	function setSync<Options, Key>(property:Key, value:ArgumentType<Options, Dynamic>, ?options:Options):Void;
	/**
		Will attempt to invoke an object as if it were a function. If the return
		value is transferable it will be returned to the called of apply,
		otherwise an error will be thrown.
	**/
	function apply<Options>(?receiver:ts.AnyOf3<Copy<ApplyArgumentThis<T>>, Dereference<ApplyArgumentThis<T>>, Dynamic>, ?arguments:{ /** Gets or sets the length of the array. This is a number one higher than the highest element defined in an array. **/ var length : ArgumentType<Dynamic, Dynamic>; /** Returns a string representation of an array. **/ var toString : ArgumentType<Dynamic, Dynamic>; /** Returns a string representation of an array. The elements are converted to string using their toLocalString methods. **/ var toLocaleString : ArgumentType<Dynamic, Dynamic>; /** Removes the last element from an array and returns it. **/ var pop : ArgumentType<Dynamic, Dynamic>; /** Appends new elements to an array, and returns the new length of the array. **/ var push : ArgumentType<Dynamic, Dynamic>; /** Combines two or more arrays.Combines two or more arrays. **/ var concat : ArgumentType<Dynamic, Dynamic>; /** Adds all the elements of an array separated by the specified separator string. **/ var join : ArgumentType<Dynamic, Dynamic>; /** Reverses the elements in an Array. **/ var reverse : ArgumentType<Dynamic, Dynamic>; /** Removes the first element from an array and returns it. **/ var shift : ArgumentType<Dynamic, Dynamic>; /** Returns a section of an array. **/ var slice : ArgumentType<Dynamic, Dynamic>; /** Sorts an array. **/ var sort : ArgumentType<Dynamic, Dynamic>; /** Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements. **/ var splice : ArgumentType<Dynamic, Dynamic>; /** Inserts new elements at the start of an array. **/ var unshift : ArgumentType<Dynamic, Dynamic>; /** Returns the index of the first occurrence of a value in an array. **/ var indexOf : ArgumentType<Dynamic, Dynamic>; /** Returns the index of the last occurrence of a specified value in an array. **/ var lastIndexOf : ArgumentType<Dynamic, Dynamic>; /** Determines whether all the members of an array satisfy the specified test. **/ var every : ArgumentType<Dynamic, Dynamic>; /** Determines whether the specified callback function returns true for any element of an array. **/ var some : ArgumentType<Dynamic, Dynamic>; /** Performs the specified action for each element in an array. **/ var forEach : ArgumentType<Dynamic, Dynamic>; /** Calls a defined callback function on each element of an array, and returns an array that contains the results. **/ var map : ArgumentType<Dynamic, Dynamic>; /** Returns the elements of an array that meet the condition specified in a callback function.Returns the elements of an array that meet the condition specified in a callback function. **/ var filter : ArgumentType<Dynamic, Dynamic>; /** Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function. **/ var reduce : ArgumentType<Dynamic, Dynamic>; /** Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function. **/ var reduceRight : ArgumentType<Dynamic, Dynamic>; /** Returns the value of the first element in the array where predicate is true, and undefinedotherwise. **/ var find : ArgumentType<Dynamic, Dynamic>; /** Returns the index of the first element in the array where predicate is true, and -1otherwise. **/ var findIndex : ArgumentType<Dynamic, Dynamic>; /** Returns the this object after filling the section identified by start and end with value **/ var fill : ArgumentType<Dynamic, Dynamic>; /** Returns the this object after copying a section of the array identified by start and endto the same array starting at position target **/ var copyWithin : ArgumentType<Dynamic, Dynamic>; /** Returns an iterable of key, value pairs for every entry in the array **/ var entries : ArgumentType<Dynamic, Dynamic>; /** Returns an iterable of keys in the array **/ var keys : ArgumentType<Dynamic, Dynamic>; /** Returns an iterable of values in the array **/ var values : ArgumentType<Dynamic, Dynamic>; }, ?options:Options):ResultTypeBidirectionalAsync<Dynamic, ApplyResult<T>>;
	function applyIgnored<Options>(?receiver:ts.AnyOf3<Copy<ApplyArgumentThis<T>>, Dereference<ApplyArgumentThis<T>>, Dynamic>, ?arguments:{ /** Gets or sets the length of the array. This is a number one higher than the highest element defined in an array. **/ var length : ArgumentType<Dynamic, Dynamic>; /** Returns a string representation of an array. **/ var toString : ArgumentType<Dynamic, Dynamic>; /** Returns a string representation of an array. The elements are converted to string using their toLocalString methods. **/ var toLocaleString : ArgumentType<Dynamic, Dynamic>; /** Removes the last element from an array and returns it. **/ var pop : ArgumentType<Dynamic, Dynamic>; /** Appends new elements to an array, and returns the new length of the array. **/ var push : ArgumentType<Dynamic, Dynamic>; /** Combines two or more arrays.Combines two or more arrays. **/ var concat : ArgumentType<Dynamic, Dynamic>; /** Adds all the elements of an array separated by the specified separator string. **/ var join : ArgumentType<Dynamic, Dynamic>; /** Reverses the elements in an Array. **/ var reverse : ArgumentType<Dynamic, Dynamic>; /** Removes the first element from an array and returns it. **/ var shift : ArgumentType<Dynamic, Dynamic>; /** Returns a section of an array. **/ var slice : ArgumentType<Dynamic, Dynamic>; /** Sorts an array. **/ var sort : ArgumentType<Dynamic, Dynamic>; /** Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements. **/ var splice : ArgumentType<Dynamic, Dynamic>; /** Inserts new elements at the start of an array. **/ var unshift : ArgumentType<Dynamic, Dynamic>; /** Returns the index of the first occurrence of a value in an array. **/ var indexOf : ArgumentType<Dynamic, Dynamic>; /** Returns the index of the last occurrence of a specified value in an array. **/ var lastIndexOf : ArgumentType<Dynamic, Dynamic>; /** Determines whether all the members of an array satisfy the specified test. **/ var every : ArgumentType<Dynamic, Dynamic>; /** Determines whether the specified callback function returns true for any element of an array. **/ var some : ArgumentType<Dynamic, Dynamic>; /** Performs the specified action for each element in an array. **/ var forEach : ArgumentType<Dynamic, Dynamic>; /** Calls a defined callback function on each element of an array, and returns an array that contains the results. **/ var map : ArgumentType<Dynamic, Dynamic>; /** Returns the elements of an array that meet the condition specified in a callback function.Returns the elements of an array that meet the condition specified in a callback function. **/ var filter : ArgumentType<Dynamic, Dynamic>; /** Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function. **/ var reduce : ArgumentType<Dynamic, Dynamic>; /** Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function. **/ var reduceRight : ArgumentType<Dynamic, Dynamic>; /** Returns the value of the first element in the array where predicate is true, and undefinedotherwise. **/ var find : ArgumentType<Dynamic, Dynamic>; /** Returns the index of the first element in the array where predicate is true, and -1otherwise. **/ var findIndex : ArgumentType<Dynamic, Dynamic>; /** Returns the this object after filling the section identified by start and end with value **/ var fill : ArgumentType<Dynamic, Dynamic>; /** Returns the this object after copying a section of the array identified by start and endto the same array starting at position target **/ var copyWithin : ArgumentType<Dynamic, Dynamic>; /** Returns an iterable of key, value pairs for every entry in the array **/ var entries : ArgumentType<Dynamic, Dynamic>; /** Returns an iterable of keys in the array **/ var keys : ArgumentType<Dynamic, Dynamic>; /** Returns an iterable of values in the array **/ var values : ArgumentType<Dynamic, Dynamic>; }, ?options:Options):Void;
	function applySync<Options>(?receiver:ts.AnyOf3<Copy<ApplyArgumentThis<T>>, Dereference<ApplyArgumentThis<T>>, Dynamic>, ?arguments:{ /** Gets or sets the length of the array. This is a number one higher than the highest element defined in an array. **/ var length : ArgumentType<Dynamic, Dynamic>; /** Returns a string representation of an array. **/ var toString : ArgumentType<Dynamic, Dynamic>; /** Returns a string representation of an array. The elements are converted to string using their toLocalString methods. **/ var toLocaleString : ArgumentType<Dynamic, Dynamic>; /** Removes the last element from an array and returns it. **/ var pop : ArgumentType<Dynamic, Dynamic>; /** Appends new elements to an array, and returns the new length of the array. **/ var push : ArgumentType<Dynamic, Dynamic>; /** Combines two or more arrays.Combines two or more arrays. **/ var concat : ArgumentType<Dynamic, Dynamic>; /** Adds all the elements of an array separated by the specified separator string. **/ var join : ArgumentType<Dynamic, Dynamic>; /** Reverses the elements in an Array. **/ var reverse : ArgumentType<Dynamic, Dynamic>; /** Removes the first element from an array and returns it. **/ var shift : ArgumentType<Dynamic, Dynamic>; /** Returns a section of an array. **/ var slice : ArgumentType<Dynamic, Dynamic>; /** Sorts an array. **/ var sort : ArgumentType<Dynamic, Dynamic>; /** Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements. **/ var splice : ArgumentType<Dynamic, Dynamic>; /** Inserts new elements at the start of an array. **/ var unshift : ArgumentType<Dynamic, Dynamic>; /** Returns the index of the first occurrence of a value in an array. **/ var indexOf : ArgumentType<Dynamic, Dynamic>; /** Returns the index of the last occurrence of a specified value in an array. **/ var lastIndexOf : ArgumentType<Dynamic, Dynamic>; /** Determines whether all the members of an array satisfy the specified test. **/ var every : ArgumentType<Dynamic, Dynamic>; /** Determines whether the specified callback function returns true for any element of an array. **/ var some : ArgumentType<Dynamic, Dynamic>; /** Performs the specified action for each element in an array. **/ var forEach : ArgumentType<Dynamic, Dynamic>; /** Calls a defined callback function on each element of an array, and returns an array that contains the results. **/ var map : ArgumentType<Dynamic, Dynamic>; /** Returns the elements of an array that meet the condition specified in a callback function.Returns the elements of an array that meet the condition specified in a callback function. **/ var filter : ArgumentType<Dynamic, Dynamic>; /** Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function. **/ var reduce : ArgumentType<Dynamic, Dynamic>; /** Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function. **/ var reduceRight : ArgumentType<Dynamic, Dynamic>; /** Returns the value of the first element in the array where predicate is true, and undefinedotherwise. **/ var find : ArgumentType<Dynamic, Dynamic>; /** Returns the index of the first element in the array where predicate is true, and -1otherwise. **/ var findIndex : ArgumentType<Dynamic, Dynamic>; /** Returns the this object after filling the section identified by start and end with value **/ var fill : ArgumentType<Dynamic, Dynamic>; /** Returns the this object after copying a section of the array identified by start and endto the same array starting at position target **/ var copyWithin : ArgumentType<Dynamic, Dynamic>; /** Returns an iterable of key, value pairs for every entry in the array **/ var entries : ArgumentType<Dynamic, Dynamic>; /** Returns an iterable of keys in the array **/ var keys : ArgumentType<Dynamic, Dynamic>; /** Returns an iterable of values in the array **/ var values : ArgumentType<Dynamic, Dynamic>; }, ?options:Options):CheckPromise<Dynamic, ResultTypeBase<Dynamic, ApplyResult<T>>>;
	/**
		`applySyncPromise` is a special version of `applySync` which may only be invoked on functions
		belonging to the default isolate AND may only be invoked from a non-default thread. Functions
		invoked in this way may return a promise and the invoking isolate will wait for that promise
		to resolve before resuming execution. You can use this to implement functions like
		readFileSync in a way that doesn't block the default isolate. Note that the invoking isolate
		will not respond to any async functions until this promise is resolved, however synchronous
		functions will still function correctly. Misuse of this feature may result in deadlocked
		isolates, though the default isolate will never be at risk of a deadlock.
	**/
	function applySyncPromise<Options>(?receiver:ts.AnyOf3<Copy<ApplyArgumentThis<T>>, Dereference<ApplyArgumentThis<T>>, Dynamic>, ?arguments:{ /** Gets or sets the length of the array. This is a number one higher than the highest element defined in an array. **/ var length : ArgumentType<Dynamic, Dynamic>; /** Returns a string representation of an array. **/ var toString : ArgumentType<Dynamic, Dynamic>; /** Returns a string representation of an array. The elements are converted to string using their toLocalString methods. **/ var toLocaleString : ArgumentType<Dynamic, Dynamic>; /** Removes the last element from an array and returns it. **/ var pop : ArgumentType<Dynamic, Dynamic>; /** Appends new elements to an array, and returns the new length of the array. **/ var push : ArgumentType<Dynamic, Dynamic>; /** Combines two or more arrays.Combines two or more arrays. **/ var concat : ArgumentType<Dynamic, Dynamic>; /** Adds all the elements of an array separated by the specified separator string. **/ var join : ArgumentType<Dynamic, Dynamic>; /** Reverses the elements in an Array. **/ var reverse : ArgumentType<Dynamic, Dynamic>; /** Removes the first element from an array and returns it. **/ var shift : ArgumentType<Dynamic, Dynamic>; /** Returns a section of an array. **/ var slice : ArgumentType<Dynamic, Dynamic>; /** Sorts an array. **/ var sort : ArgumentType<Dynamic, Dynamic>; /** Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements. **/ var splice : ArgumentType<Dynamic, Dynamic>; /** Inserts new elements at the start of an array. **/ var unshift : ArgumentType<Dynamic, Dynamic>; /** Returns the index of the first occurrence of a value in an array. **/ var indexOf : ArgumentType<Dynamic, Dynamic>; /** Returns the index of the last occurrence of a specified value in an array. **/ var lastIndexOf : ArgumentType<Dynamic, Dynamic>; /** Determines whether all the members of an array satisfy the specified test. **/ var every : ArgumentType<Dynamic, Dynamic>; /** Determines whether the specified callback function returns true for any element of an array. **/ var some : ArgumentType<Dynamic, Dynamic>; /** Performs the specified action for each element in an array. **/ var forEach : ArgumentType<Dynamic, Dynamic>; /** Calls a defined callback function on each element of an array, and returns an array that contains the results. **/ var map : ArgumentType<Dynamic, Dynamic>; /** Returns the elements of an array that meet the condition specified in a callback function.Returns the elements of an array that meet the condition specified in a callback function. **/ var filter : ArgumentType<Dynamic, Dynamic>; /** Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function. **/ var reduce : ArgumentType<Dynamic, Dynamic>; /** Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function. **/ var reduceRight : ArgumentType<Dynamic, Dynamic>; /** Returns the value of the first element in the array where predicate is true, and undefinedotherwise. **/ var find : ArgumentType<Dynamic, Dynamic>; /** Returns the index of the first element in the array where predicate is true, and -1otherwise. **/ var findIndex : ArgumentType<Dynamic, Dynamic>; /** Returns the this object after filling the section identified by start and end with value **/ var fill : ArgumentType<Dynamic, Dynamic>; /** Returns the this object after copying a section of the array identified by start and endto the same array starting at position target **/ var copyWithin : ArgumentType<Dynamic, Dynamic>; /** Returns an iterable of key, value pairs for every entry in the array **/ var entries : ArgumentType<Dynamic, Dynamic>; /** Returns an iterable of keys in the array **/ var keys : ArgumentType<Dynamic, Dynamic>; /** Returns an iterable of values in the array **/ var values : ArgumentType<Dynamic, Dynamic>; }, ?options:Options):CheckPromise<Dynamic, ResultTypeBase<Dynamic, ApplyResult<T>>>;
	static var prototype : Reference<Dynamic>;
}